name        : linux-desktop
version     : "6.10.7"
release     : 41
homepage    : https://kernel.org/
upstreams   :
    - https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-6.10.7.tar.xz : 900d567ff01824708ce24c3b37faaef03e6f6145411dd447a6ff2edc8c5db3a9
summary     : Linux Kernel - Default Desktop Build
description : |
    Work in progress build for desktop enabling
license     :
    - GPL-2.0-only
builddeps   :
    - binary(bc)
    - binary(bison)
    - binary(dbus-broker)
    - binary(dracut)
    - binary(flex)
    - binary(gzip)
    - binary(kmod)
    - binary(less)
    - binary(m4)
    - binary(perl)
    - binary(python3)
    - binary(which)
    - pkgconfig(gmp)
    - pkgconfig(libelf)
    - pkgconfig(libssl)
    - pkgconfig(libzstd)
    - pkgconfig(mpfr)
    - binary(grep)
    - gcc # libgcc_s.so.1 - needed until we get llvm-libgcc
    - intel-microcode
    - linux-firmware-amd
setup       : |
    extraVersion="-%(release).desktop"
    sed -e "s/EXTRAVERSION =.*/EXTRAVERSION = $extraVersion/" -i Makefile

    %install_file %(pkgdir)/config-x86_64 .config
    %patch %(pkgdir)/more-uarches-for-kernel-6.8-rc4+.patch
    %patch %(pkgdir)/asus-patch-series.patch
    %make CC=clang ARCH=x86_64 LLVM=1 WERROR=0 oldconfig || exit 1
build       : |
    # Do NOT use CONFIG_DEBUG_SECTION_MISMATCH as it is GCC specific
    %make VERBOSE=0 V=0 CC=clang ARCH=x86_64 LLVM=1 WERROR=0
    %make -C tools/objtool VERBOSE=0 V=0 CC=clang ARCH=x86_64 LLVM=1 WERROR=0
install     : |
    kernelVersion="%(version)-%(release).desktop"
    %install_exe arch/x86/boot/bzImage %(installroot)%(libdir)/kernel/$kernelVersion/vmlinuz

    %install_file .config %(installroot)%(libdir)/kernel/$kernelVersion/config
    %install_file System.map %(installroot)%(libdir)/kernel/$kernelVersion/System.map

    # Modules please
    %install_dir %(installroot)%(libdir)/modules/$kernelVersion
    %make CC=clang ARCH=x86_64 LLVM=1 WERROR=0 INSTALL_MOD_STRIP=1 INSTALL_MOD_PATH=%(installroot)/usr modules_install KERNELRELEASE="$kernelVersion" mod-fw= DEPMOD=/usr/bin/true
    /usr/sbin/depmod -b %(installroot)/usr ${kernelVersion} -a

    # Include early microcode
    LD_PRELOAD='' dracut --strip --tmpdir /tmp -N -f \
        --kmoddir %(installroot)%(libdir)/modules/${kernelVersion} --kver $kernelVersion --add "dash bash systemd virtiofs" \
        --strip --hardlink --nomdadmconf --nolvmconf --add-drivers "qxl virtio-gpu" --zstd --early-microcode \
        %(installroot)%(libdir)/kernel/$kernelVersion/50-default.initrd

    # No building against this kernel pls.
    rm -rf %(installroot)%(libdir)/modules/${kernelVersion}/build
    rm -rf %(installroot)%(libdir)/modules/${kernelVersion}/source

    # Temporary: Help with VMs
    ln -s $kernelVersion/50-default.initrd %(installroot)%(libdir)/kernel/current.desktop.initrd
    ln -s $kernelVersion/vmlinuz %(installroot)%(libdir)/kernel/current.desktop.kernel
    %install_file %(pkgdir)/boot.json %(installroot)%(libdir)/kernel/$kernelVersion/boot.json
    sed -e 's/@VERSION@/%(version)-%(release).desktop/g' -i %(installroot)%(libdir)/kernel/$kernelVersion/boot.json
